/*
  ==============================================================================

    SynthProcessor.h
    Created: 21 Jan 2018 9:55:11pm
    Author:  Chris.Buttacavoli

  ==============================================================================
*/

#pragma once

#include "../JuceLibraryCode/JuceHeader.h"
#include "OscillatorVoice.h"

//==============================================================================
/*
*/
class SynthProcessor : public AudioProcessor
{
	SynthProcessor(MidiKeyboardState &keyState) : keyboardState(keyState) {
		for (int i = 0; i < 5; i++)
		{
			mySynth.addVoice(new OscillatorVoice(OscillatorType::sawWave));
		}
		mySynth.clearSounds();
		mySynth.addSound(new SynthSound());
	}

public:
	~SynthProcessor() {	}

	const String getName() const override {
		return String("My Synth Processor");
	}

	void prepareToPlay(double sampleRate, int MaxSamplesPerBlock) override{

		midiCollector.reset(sampleRate);

		mySynth.setCurrentPlaybackSampleRate(sampleRate);
	}
	
	void processBlock(AudioBuffer<float> &buffer, MidiBuffer &midiMessages) override {
		// the synth always adds its output to the audio buffer, so we have to clear it
		// first..
		buffer.clear();

		// fill a midi buffer with incoming messages from the midi input.
		MidiBuffer incomingMidi;
		midiCollector.removeNextBlockOfMessages(incomingMidi, buffer.getNumSamples());

		// pass these messages to the keyboard state so that it can update the component
		// to show on-screen which keys are being pressed on the physical midi keyboard.
		// This call will also add midi messages to the buffer which were generated by
		// the mouse-clicking on the on-screen keyboard.
		keyboardState.processNextMidiBuffer(incomingMidi, 0, buffer.getNumSamples(), true);

		// and now get the synth to process the midi events and generate its output.
		mySynth.renderNextBlock(buffer, incomingMidi, 0, buffer.getNumSamples());
	}

	void releaseResources() override {
	}


private:
	//Getting midi/keyboard messages
	MidiMessageCollector midiCollector;
	MidiKeyboardState& keyboardState;

	//the actual synth object
	Synthesiser mySynth;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (SynthProcessor)
};
