/*
  ==============================================================================

    SynthProcessor.h
    Created: 21 Jan 2018 9:55:11pm
    Author:  Chris.Buttacavoli

  ==============================================================================
*/

#pragma once

#include "../JuceLibraryCode/JuceHeader.h"
#include "SynthSound.h"
#include "OscillatorVoice.h"
#include "GenericEditor.h"
#include "maximilian.h"
#include "OscillatorCombo.h"


//==============================================================================
/*
*/
class SynthProcessor : public AudioProcessor
{
public:
	SynthProcessor(MidiKeyboardState &keyState) : keyboardState(keyState) {

		// Initialize GUI controlled parameters
		const StringArray & theOscillators = {"Sine", "Saw", "Square", "Noise"};
		addParameter(new AudioParameterChoice("oscillator1","Oscillator", theOscillators, 1, "Cats"));
		addParameter(new AudioParameterChoice("oscillator2", "Oscillator", theOscillators, 1, "Cats"));
		addParameter(new AudioParameterChoice("oscillator3", "Oscillator", theOscillators, 1, "Cats"));
		addParameter(new AudioParameterChoice("oscillator4", "Oscillator", theOscillators, 1, "Cats"));

		addParameter(new AudioParameterFloat("pitch1", "Pitch1", -1.0f, 1.0f, 0.0f));
		addParameter(new AudioParameterFloat("level1", "Level1", 0.0f, 1.0f, 0.0f));
		addParameter(new AudioParameterFloat("pitch2", "Pitch2", -1.0f, 1.0f, 0.0f));
		addParameter(new AudioParameterFloat("level2", "Level2", 0.0f, 1.0f, 0.0f));
		addParameter(new AudioParameterFloat("pitch3", "Pitch3", -1.0f, 1.0f, 0.0f));
		addParameter(new AudioParameterFloat("level3", "Level3", 0.0f, 1.0f, 0.0f));
		addParameter(new AudioParameterFloat("pitch4", "Pitch4", -1.0f, 1.0f, 0.0f));
		addParameter(new AudioParameterFloat("level4", "Level4", 0.0f, 1.0f, 0.0f));

		/*addParameter(new AudioParameterFloat("release", "Release", 0.0f, 10.0f, 5.0f));
		addParameter(new AudioParameterFloat("distAmount", "Distortion", 0.0f, 15.0f, 0.0f));*/

		mySynth.clearSounds();
		// Use this loop to add multiple voices so that we can play more than one note
		for (int i = 0; i < 10; i++)
			mySynth.addVoice(new OscillatorVoice());
		mySynth.addSound(new SynthSound());
	}

	~SynthProcessor() {	}

	void addParametersToMap() {
		const OwnedArray<AudioProcessorParameter>& params = getParameters();
		for (AudioProcessorParameter** ptr = params.begin(); ptr < params.end(); ptr++)
		{
			paramMap.insert(std::pair<juce::String, AudioProcessorParameter*>((**ptr).getName(32), *ptr));
		}
	}

	// TODO: simplify this function
	const String getName() const override {
		return String("My Synth Processor");
	}

	void prepareToPlay(double sampleRate, int MaxSamplesPerBlock) override{
		midiCollector.reset(sampleRate);
		mySynth.setCurrentPlaybackSampleRate(sampleRate);
	}
	
	void processBlock(AudioBuffer<float> &buffer, MidiBuffer &midiMessages) override {
		// Hooking up our OscillatorVoice to our parameters.
		const OwnedArray<AudioProcessorParameter>& params = getParameters();
		for (int i = 0; i < mySynth.getNumVoices(); i++)
			if (myVoice = dynamic_cast<OscillatorVoice*>(mySynth.getVoice(i)))
				myVoice->getParamsFromProcessor(params, paramMap);
		
		// the synth always adds its output to the audio buffer, so we have to clear it first..
		buffer.clear();

		// fill a midi buffer with incoming messages from the midi input.
		MidiBuffer incomingMidi;
		midiCollector.removeNextBlockOfMessages(incomingMidi, buffer.getNumSamples());

		// pass these messages to the keyboard state so that it can update the component
		// to show on-screen which keys are being pressed on the physical midi keyboard.
		// This call will also add midi messages to the buffer which were generated by
		// the mouse-clicking on the on-screen keyboard.
		keyboardState.processNextMidiBuffer(incomingMidi, 0, buffer.getNumSamples(), true);

		// and now get the synth to process the midi events and generate its output.
		mySynth.renderNextBlock(buffer, incomingMidi, 0, buffer.getNumSamples());
	}

	void releaseResources() override {

	}

	double getTailLengthSeconds() const override {
		return 0;
	}

	bool acceptsMidi() const override {
		return true;
	}

	bool producesMidi() const override {
		return true;
	}


	/*************
	** Create Process Editor Class to generete new UI elements
	**
	*************/
	AudioProcessorEditor* createEditor() override{
		// Connects a processor editor to this processor
		return new GenericEditor (*this);
	}

	bool hasEditor() const override {
		return true;
	}

	int getNumPrograms() override {
		//temp?
		return 0;
	}

	void changeProgramName(int index, const String &newName) override {
		
	}

	int getCurrentProgram() override {
		//temp?
		return 0;
	}

	void setCurrentProgram(int index) override {
		
	}

	//derp
	const String getProgramName(int index) override {
		return "The Synth";
	}

	void setStateInformation(const void * data, int sizeInBytes) override {

	}

	void getStateInformation(juce::MemoryBlock &destData) override {

	}

	//Getting midi/keyboard messages
	MidiMessageCollector midiCollector;
	MidiKeyboardState& keyboardState;

	//the actual synth object
	Synthesiser mySynth;
	OscillatorVoice* myVoice;

	// Our parameters
	//AudioParameterFloat* gainParam = nullptr;
	AudioParameterFloat* paramFloat = nullptr;
	std::map <juce::String, AudioProcessorParameter*> paramMap;

	// Filters
	dsp::ProcessorDuplicator<dsp::IIR::Filter<float>, dsp::IIR::Coefficients<float>> lowPassFilter;
	dsp::ProcessorDuplicator<dsp::IIR::Filter<float>, dsp::IIR::Coefficients<float>> highPassFilter;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (SynthProcessor)
};
